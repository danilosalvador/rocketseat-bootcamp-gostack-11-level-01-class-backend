const express = require('express');

const app = express();

app.use(express.json());

/**
 * MÃ©todos HTTP
 * 
 * GET: Buscar informaÃ§Ãµes do backend
 * POST: Criar uma informaÃ§Ã£o no backend
 * PUT: Alterar uma informaÃ§Ã£o no backend (conjunto de informaÃ§Ãµes)
 * PATCH: Alterar uma informaÃ§Ã£o no backend (uma informaÃ§Ã£o, algo especÃ­fico)
 * DELETE: Excluir uma informaÃ§Ã£o no backend
 */

 /**
  * Tipos de parÃ¢metros
  * 
  * Query Params: Filtros e paginaÃ§Ã£o
  * Route Params: Identificar recursos (atualizar/excluir)
  * Request Body: ConteÃºdo na hora criar ou editar um recurso (JSON)
  */
app.get('/projects', (request, response) => {
  const { title } = request.query;

  console.log(title);

  return response.json([
    'Projeto 1',
    'Projeto 2',
  ]);
});

app.post('/projects', (request, response) => {

  const { title, owner } = request.body;

  console.log(title);
  console.log(owner);

  return response.json([
    'Projeto 1',
    'Projeto 2',
    'Projeto 3',
  ]);
});

app.put('/projects/:id', (request, response) => {
  const { id } = request.params;

  console.log(id);

  return response.json([
    'Projeto 4',
    'Projeto 2',
    'Projeto 3',
  ]);
});

app.delete('/projects/:id', (request, response) => {
  return response.json([
    'Projeto 2',
    'Projeto 3'
  ]);
});


app.listen(3333, () => {
  console.log('ğŸš€ Backend started!');
});